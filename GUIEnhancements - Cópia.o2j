Array.prototype.interpolate = function(a1, an, n, meth, rest){
	a1 = parseFloat(a1)
	an = parseFloat(an)

	if (this.length != 0) return false
	
	this[0] = a1
	this[n-1] = an
	this.length = n

	if (meth == "a" || !meth) r = (an-a1)/(n-1)
	else if (meth == "g") q = Math.pow(an/a1,(1/(n-1)))
	else if (meth == "h") d = (a1/an - 1)/(n-1)
	else if (meth.split(';')[0] == "c"){

		acc = parseFloat(meth.split(';')[1])

	}

	for (nk = 1; nk < n-1; nk++){
		if (meth == "a" || !meth) this[nk] = this[nk-1] + r
		else if (meth == "g") this[nk] = this[nk-1] * q
		else if (meth.getSubstring(';') == "c"){

			this[nk] = an - (an+a1)*Math.pow(1/acc,nk)
		} else if (meth == "h"){
			this[nk] = this[0]/(1 + nk*d)
		}
	}


	if (rest != "noRound" && rest != "relative"){
		for (nk = 0; nk < n; nk++){
			this[nk] = Math.round(this[nk])
		}
	} else if (rest == "relative"){
		for (nk = 0; nk < n; nk++){
			this[nk] = this[nk]/Math.max(a1,an)
		}
	}

	return this

}

function HTMLElement(){
	var gotObject = undefined
	var litObject = ""
	var idx = 0
	var thisArguments = arguments

	switch (arguments.length){
		case 1:
			if (typeof arguments[0] == "string"){
				gotObject =  document.getElementsByName(   arguments[0]   )[0]
				litObject = "document.getElementsByName('"+arguments[0]+"')[0]"
			} else if (typeof arguments[0] == "object"){
				gotObject = arguments[0]
			}

			break
		case 2:
			
			switch (arguments[0]){
				case "className":

					for (ii = 0; ii < document.all.length; ii++){
						if (document.all[ii].className == arguments[1]){
							gotObject =  document.all[  ii  ]
							litObject = "document.all["+ii+"]"
							break
						}
					}

					gotObject = undefined
					break

				case "tagName":
					gotObject =  document.getElementsByTagName(   arguments[1]   )[0]
					litObject = "document.getElementsByTagName('"+arguments[1]+"')[0]"

					break

				default:
					gotObject =  document.getElementsByName(   arguments[0]   )[  arguments[1]  ]
					litObject = "document.getElementsByName('"+arguments[0]+"')["+arguments[1]+"]"
			
			}

			break
		case 3:

			switch (arguments[0]){
				case "className":

					for (ii = 0, idx = 0; ii < document.all.length; ii++){
						if (document.all[ii].className == arguments[1]){

							if (idx == arguments[2]){
								gotObject = document.all[ii]
								break
							}
							idx++
						}
					}
					break

				case "tagName":
					gotObject =  document.getElementsByTagName(   arguments[1]   )[  arguments[2]  ]
					litObject = "document.getElementsByTagName('"+arguments[1]+"')["+arguments[2]+"]"
					break

				case "id":
					gotObject =  document.getElementsByName(   arguments[1]   )[  arguments[2]  ]  
					litObject = "document.getElementsByName('"+arguments[1]+"')["+arguments[2]+"]"
					break

				default:
					throw new Error('Invalid arguments')
			
			}


			break
		default:
			throw new Error('Invalid arguments')
	}

	this.getObject = function(){
		return gotObject
	}

	this.getLitObject = function(){
		return litObject
	}

	this.nextObject = function(){
		if (!isNaN(thisArguments[thisArguments.length-1])){

			thisArguments[thisArguments.length-1]++

			switch (thisArguments.length){
				case 2:
					gotObject = document.getElementsByName(thisArguments[0])[thisArguments[1]]
					break
				case 3:

					switch (thisArguments[0]){
						case "className":

							encontrei = false
							for (ii = 0, idx = 0; ii < document.all.length; ii++){
								if (document.all[ii].className == thisArguments[1]){

									if (idx == thisArguments[2]){
										gotObject = document.all[ii]
										encontrei = true
										break
									}
									idx++

								}
							}

							if (!encontrei) gotObject = undefined
							break
						case "tagName":
							gotObject = document.getElementsByTagName(thisArguments[1])[thisArguments[2]]
							break
						case "id":
							gotObject = document.getElementsByName(thisArguments[1])[thisArguments[2]]
							break
						default:
							throw new Error('Invalid arguments')
					}
							


					break
				default:
					throw new Error('Invalid arguments')
					break
			}

			
		} else throw new Error('Function does not support this method according to passed arguments to the prototype constructor')
		
	}

	this.setVisualization = function(param){
		if (!gotObject) return false

		switch (param){
			case "inline":
				gotObject.style.display = "inline"
				gotObject.style.visibility = "visible"
				break
			case "newline":
				gotObject.style.display = "block"
				gotObject.style.visibility = "visible"
				break
			case "ghost":
				gotObject.style.display = "inline"
				gotObject.style.visibility = "hidden"
				break
			case "invisible":
				gotObject.style.display = "none"
				gotObject.style.visibility = "hidden"
				break
			default:
				gotObject.style.display = "inline"
				gotObject.style.visibility = "visible"

		}
	}

	this.isVisible = function(){
		if (!gotObject) return null

		objDisplay = gotObject.style.display
		objVisibility = gotObject.style.visibility

		if (objDisplay != "none" && objVisibility != "hidden") return true
		else return false
		
	}

	this.centerOnScreen = function(){
		documentWidth = parseInt(document.documentElement.clientWidth)
		documentHeight = parseInt(document.documentElement.clientHeight)
		thisWidth = parseInt(gotObject.style.width)
		thisHeight = parseInt(gotObject.style.height)

		if (!thisWidth) thisWidth = parseInt(gotObject.currentStyle.width)
		if (!thisHeight) thisHeight = parseInt(gotObject.currentStyle.height)


		gotObject.style.left = parseInt((documentWidth - thisWidth)/2) + "px"
		gotObject.style.top = parseInt((documentHeight - thisHeight)/2) + "px"
	}

	this.animate = function(FX, animationProgress){
		if (!(animationProgress instanceof Array)){
			animationProgress = new Array()
			animationProgress.interpolate(10,100,5,"g","relative")
		}
		
		
		for (elfx = 0; elfx < animationProgress.length; elfx++){
			switch (FX){
				case "zoom":
					setTimeout(litObject + ".style.msTransform = 'scale("+animationProgress[elfx]+","+animationProgress[elfx]+")';", elfx*66)
					setTimeout(litObject + ".style.opacity = " + animationProgress[elfx], elfx*66)
					break
				case "moveRight":
					setTimeout(litObject + ".style.right = '" + animationProgress[elfx] + "px';", elfx*66)
					break
				case "fade":
					setTimeout(litObject + ".style.opacity = " + animationProgress[elfx], elfx*66)					
				default:
			}
				
		}
	}
}

function graphicList(refObj, selectedClassName){
	this.newMethod = HTMLElement

	if (typeof refObj == "string") refObj = document.getElementById(refObj)
	if (refObj.id) this.newMethod(refObj.id)
	else this.newMethod(refObj)

	var activeClassName
	var activeLine = -1

	var reallyThis

	this.setActiveLineClassName = function(defstyle){
		activeClassName = defstyle
	}
	
	this.clearAll = function(){
		while (refObj.rows.length){
			refObj.deleteRow(0)
		}
	}

	this.setInstancePointer = function(iPointer){
		reallyThis = iPointer
	}

	this.selectLine = function(idx){
		if (idx == activeLine || isNaN(idx)) return false

		if (activeLine != -1){
			refObj.rows[activeLine].className = refObj.rows[activeLine].className.fullReplace(activeClassName,'').trim()
		}

		if (idx != -1){
			if (refObj.rows[idx].className) refObj.rows[idx].className += " " + activeClassName
			else refObj.rows[idx].className = activeClassName
		}

		activeLine = idx
	}

	this.getSelectedLine = function(){
		return activeLine
	}

	this.makeLinesSelectable = function(){
		for (d = 0; d < refObj.rows.length; d++){
			refObj.rows[d].onclick = function(){
				reallyThis.selectLine(this.rowIndex)
			}
		}
	}


	if (selectedClassName !== undefined){
		this.setActiveLineClassName(selectedClassName)
	}
}

function textArea(refObj){
	this.newMethod = HTMLElement
	if (typeof refObj == "string") refObj = document.getElementById(refObj)
	if (refObj.id) this.newMethod(refObj.id)
	else this.newMethod(refObj)

	allowTabCharacter_p = function(){
		if (event.keyCode == 9){
			if (event != null && event.srcElement && event.srcElement.value && document.selection != null) {
				document.selection.createRange().text = '\t';
				event.returnValue = false;
			} else {
				event.srcElement.value += '\t';
				return false;
			}
		}
	}

	this.allowTabCharacter = function(){
		refObj.attachEvent("onkeydown", allowTabCharacter_p)
	}


	autoResize_p = function(){
		refObject.style.height = refObject.scrollHeight + "px"
	}

	this.autoResize = function(){
		element.attachEvent('onkeydown', autoResize_p)
		element.attachEvent('onkeyup', autoResize_p)
		element.attachEvent('onpaste',autoResize_p)
		element.attachEvent('ondrop',autoResize_p)
		element.attachEvent('onkeydown',autoResize_p)
	}

}

function linedTextArea(refObj, selectedClassName){
	this.newMethod = graphicList
	this.newMethod(refObj, selectedClassName)

	var reallyThis = null

	this.setInstancePointer = function(thisClass){
		reallyThis = thisClass
	}

	var minSize = 10
	autoResize = function(){
		actualWidth = event.srcElement.value.length + 7*new String(event.srcElement.value).matchLength("%09".decode())

		if (actualWidth >= minSize){
			event.srcElement.size = actualWidth
		} else {	
			event.srcElement.size = minSize
		}
	}

	moveCaretToLastChar = function(refObj_p){
		refObj_p.focus()
		newTextRange = refObj_p.createTextRange()
		newTextRange.moveStart('character', refObj_p.value.length)
		newTextRange.collapse()
		newTextRange.select()
	}

	getCaretPosition = function(){
		var oSel = document.selection.createRange();
		oSel.moveStart('character', -event.srcElement.value.length);
		return oSel.text.length		
	}

	newLine = function(setContent, defPosition){
		if (defPosition) newLine_row = refObj.insertRow(defPosition)
		else newLine_row = refObj.insertRow()

		//defPosition = defPosition || refObj.rows.length
		setContent = setContent || ""

		calcSize = Math.max(minSize, setContent.length + 7*(setContent.matchLength("%09".decode()))) + 5

		newLine_cnt = newLine_row.insertCell()

		newLine_cntText = document.createElement("INPUT")
		newLine_cntText.size = calcSize
		newLine_cntText.value = setContent
		newLine_cnt.appendChild(newLine_cntText)


		newLine_cnt.onkeydown = function(){
			updateLTA()
			autoResize()
		}

		newLine_cnt.onkeyup = function(){
			autoResize()
		}


		if (defPosition) refObj.rows[defPosition].cells[0].getElementsByTagName("INPUT")[0].focus()
		else  refObj.rows[refObj.rows.length-1].cells[0].getElementsByTagName("INPUT")[0].focus()
	}

	updateLTA = function(){
		if (event.keyCode == 13){
			iCaretPos = getCaretPosition()
			moveThisToNextLine = event.srcElement.value.substring(iCaretPos, event.srcElement.value.length)
			event.srcElement.value = event.srcElement.value.substring(0, iCaretPos)

			newLine(moveThisToNextLine, event.srcElement.parentElement.parentElement.rowIndex+1)
		}

		if (refObj.rows.length != 1 && ((event.keyCode == 8 && getCaretPosition() == 0) || (event.keyCode == 46 && getCaretPosition() == event.srcElement.value.length))){
			if (event.keyCode == 8 && getCaretPosition() == 0){	
				if (event.srcElement.parentElement.parentElement.rowIndex == 0) return null
				nearLine = refObj.rows[event.srcElement.parentElement.parentElement.rowIndex-1].cells[0].getElementsByTagName("INPUT")[0]
				nearLine.value += event.srcElement.value

			} else if (event.keyCode == 46 && getCaretPosition() == event.srcElement.value.length){

				if (event.srcElement.parentElement.parentElement.rowIndex == refObj.rows.length-1) return null
				nearLine = refObj.rows[event.srcElement.parentElement.parentElement.rowIndex+1].cells[0].getElementsByTagName("INPUT")[0]
				nearLine.value = event.srcElement.value + nearLine.value
			}

			moveCaretToLastChar(nearLine)
			refObj.deleteRow(event.srcElement.parentElement.parentElement.rowIndex)
		}

		if (event.keyCode == 38 || event.keyCode == 40){
			getCurrentLine = event.srcElement.parentElement.parentElement.rowIndex
			if (event.keyCode == 38) getCurrentLine--
			if (event.keyCode == 40) getCurrentLine++

			if (parseInt(getCurrentLine) >= 0 && parseInt(getCurrentLine) < refObj.rows.length){ 

				refObj.rows[getCurrentLine].cells[0].getElementsByTagName("INPUT")[0].focus()
				moveCaretToLastChar(refObj.rows[getCurrentLine].cells[0].getElementsByTagName("INPUT")[0])
			}
		}

		if (event.keyCode == 37 || event.keyCode == 39){
			getCurrentLine = event.srcElement.parentElement.parentElement.rowIndex
			if (event.keyCode == 39 && getCaretPosition() == event.srcElement.value.length){
				getCurrentLine++
				changeCursorLine()
			} else if (event.keyCode == 37 && getCaretPosition() == 0){
				getCurrentLine--
				changeCursorLine()
			}


			function changeCursorLine(){
				if (parseInt(getCurrentLine) >= 0 && parseInt(getCurrentLine) < refObj.rows.length){
					refObj.rows[getCurrentLine].cells[0].getElementsByTagName("INPUT")[0].focus()
					if (event.keyCode == 37) moveCaretToLastChar(refObj.rows[getCurrentLine].cells[0].getElementsByTagName("INPUT")[0])
				}
			}

		}

		if (event.keyCode == 9){
			document.selection.createRange().text = '\t'
			event.returnValue = false
		}
	}

	if (refObj.getElementsByTagName("INPUT").length == 0){
		newLine()
	}

	refObj.getElementsByTagName("INPUT")[0].attachEvent("onkeydown", updateLTA)
	refObj.getElementsByTagName("INPUT")[0].attachEvent("onkeydown", autoResize)
	refObj.getElementsByTagName("INPUT")[0].attachEvent("onkeyup", autoResize)

	this.getValue = function(){
		gotValue = ""

		for (i = 0; i < refObj.rows.length; i++){
			gotValue += refObj.rows[i].cells[0].getElementsByTagName("INPUT")[0].value
			if (i != refObj.rows.length-1) gotValue += lineBreak
		}

		return gotValue
	}

	this.setValue = function(someStr){
		this.clearAll()
		someStr = someStr.fixLineBreak()
		someStr = someStr.split(lineBreak)
		
		for (a = 0; a < someStr.length; a++){
			newLine(someStr[a], a)
		}
	}
}

function popupMenu(ppMenu, ppCaller, ppCallerTexto, selectedClass){
	var elementoPopUp = new HTMLElement(ppMenu)
	var elementoAcionador = new HTMLElement(ppCaller)
	var elementoTexto = new HTMLElement(ppCallerTexto)
	var reallyThis
	var currentLine = -1

	this.setInstancePointer = function(thisClass){
		thisClass = reallyThis
	}

	gObj = elementoPopUp.getObject()
	gObj_texto = elementoTexto.getObject()

	this.getCurrentLine = function()	{return currentLine}

	gObj.onclick = function(){

		gObj_texto.innerText = event.srcElement.innerText
		getTR = event.srcElement.parentElement
		currentLine = getTR.rowIndex
		elementoPopUp.setVisualization("invisible")		
	}

	for (xhx = 0; xhx < gObj.rows.length; xhx++){
		gObj.rows[xhx].onmouseover = function(){
			if (gObj.rows[this.rowIndex].className.indexOf(' ' + selectedClass) == -1){
				gObj.rows[this.rowIndex].className += " " + selectedClass
			}
		}

		gObj.rows[xhx].onmouseover = function(){
			gObj.rows[this.rowIndex].className = gObj.rows[this.rowIndex].className.fullReplace(" " + selectedClass,"")
		}
	}

	show_p = function(){
		elementoPopUp.setVisualization('inline')
		elementoPopUp.getObject().style.left = elementoTexto.getObject().getBoundingClientRect().left + "px"
		elementoPopUp.getObject().style.top =  elementoTexto.getObject().getBoundingClientRect().bottom + "px"
		elementoPopUp.getObject().style.width = (elementoAcionador.getObject().getBoundingClientRect().right - elementoTexto.getObject().getBoundingClientRect().left) + "px"
		
		if (event) event.cancelBubble = true
	}

	this.show = function(){
		show_p()
	}

	this.attachCalls = function(strFunct){

		for (xhx = 0; xhx < gObj.rows.length; xhx++){
		}
	}

	elementoAcionador.getObject().attachEvent("onclick", show_p)
}